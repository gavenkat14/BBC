<%@ var programConfiguration:com.recipegrace.bbc.workflow.ProgramConfiguration %>
# This code is generated from BBC project
# DON'T MODIFY THE CODE MANUALLY
# DON'T MODIFY THE CODE MANUALLY
# DON'T MODIFY THE CODE MANUALLY
# DON'T MODIFY THE CODE MANUALLY
# DON'T MODIFY THE CODE MANUALLY
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START composer_quickstart]
"""Example Airflow DAG that creates a Cloud Dataproc cluster, runs the Hadoop
wordcount example, and deletes the cluster.

This DAG relies on three Airflow variables
https://airflow.apache.org/concepts.html#variables
* gcp_project - Google Cloud Project to use for the Cloud Dataproc cluster.
* gce_zone - Google Compute Engine zone where Cloud Dataproc cluster should be
created.
* gcs_bucket - Google Cloud Storage bucket to use for result of Hadoop job.
See https://cloud.google.com/storage/docs/creating-buckets for creating a
bucket.
"""

import datetime
import os
import ntpath
import os
import re
import time
import uuid
from datetime import timedelta
from airflow import models
from airflow.contrib.operators import dataproc_operator
from airflow.contrib.operators import gcs_download_operator
from airflow.operators import bash_operator
from airflow.utils import trigger_rule
from airflow.contrib.hooks.gcp_dataproc_hook import DataProcHook
from airflow.contrib.hooks.gcs_hook import GoogleCloudStorageHook
from airflow.exceptions import AirflowException
from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults
from airflow.version import version
from googleapiclient.errors import HttpError
#from airflow.utils import timezone

class DataprocClusterCreateOperatorModified(BaseOperator):
    """
    Create a new cluster on Google Cloud Dataproc. The operator will wait until the
    creation is successful or an error occurs in the creation process.
    The parameters allow to configure the cluster. Please refer to
    https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.clusters
    for a detailed explanation on the different parameters. Most of the configuration
    parameters detailed in the link are available as a parameter to this operator.
    :param cluster_name: The name of the DataProc cluster to create. (templated)
    :type cluster_name: string
    :param project_id: The ID of the google cloud project in which
        to create the cluster. (templated)
    :type project_id: string
    :param num_workers: The # of workers to spin up
    :type num_workers: int
    :param storage_bucket: The storage bucket to use, setting to None lets dataproc
        generate a custom one for you
    :type storage_bucket: string
    :param init_actions_uris: List of GCS uri's containing
        dataproc initialization scripts
    :type init_actions_uris: list[string]
    :param init_action_timeout: Amount of time executable scripts in
        init_actions_uris has to complete
    :type init_action_timeout: string
    :param metadata: dict of key-value google compute engine metadata entries
        to add to all instances
    :type metadata: dict
    :param image_version: the version of software inside the Dataproc cluster
    :type image_version: string
    :param properties: dict of properties to set on
        config files (e.g. spark-defaults.conf), see
        https://cloud.google.com/dataproc/docs/reference/rest/v1/ \
        projects.regions.clusters#SoftwareConfig
    :type properties: dict
    :param master_machine_type: Compute engine machine type to use for the master node
    :type master_machine_type: string
    :param master_disk_size: Disk size for the master node
    :type master_disk_size: int
    :param worker_machine_type: Compute engine machine type to use for the worker nodes
    :type worker_machine_type: string
    :param worker_disk_size: Disk size for the worker nodes
    :type worker_disk_size: int
    :param num_preemptible_workers: The # of preemptible worker nodes to spin up
    :type num_preemptible_workers: int
    :param labels: dict of labels to add to the cluster
    :type labels: dict
    :param zone: The zone where the cluster will be located. (templated)
    :type zone: string
    :param network_uri: The network uri to be used for machine communication, cannot be
        specified with subnetwork_uri
    :type network_uri: string
    :param subnetwork_uri: The subnetwork uri to be used for machine communication,
        cannot be specified with network_uri
    :type subnetwork_uri: string
    :param internal_ip_only: If true, all instances in the cluster will only
        have internal IP addresses. This can only be enabled for subnetwork
        enabled networks
    :type internal_ip_only: bool
    :param tags: The GCE tags to add to all instances
    :type tags: list[string]
    :param region: leave as 'global', might become relevant in the future. (templated)
    :param gcp_conn_id: The connection ID to use connecting to Google Cloud Platform.
    :type gcp_conn_id: string
    :param delegate_to: The account to impersonate, if any.
        For this to work, the service account making the request must have domain-wide
        delegation enabled.
    :type delegate_to: string
    :param service_account: The service account of the dataproc instances.
    :type service_account: string
    :param service_account_scopes: The URIs of service account scopes to be included.
    :type service_account_scopes: list[string]
    :param idle_delete_ttl: The longest duration that cluster would keep alive while
        staying idle. Passing this threshold will cause cluster to be auto-deleted.
        A duration in seconds.
    :type idle_delete_ttl: int
    :param auto_delete_time:  The time when cluster will be auto-deleted.
    :type auto_delete_time: datetime.datetime
    :param auto_delete_ttl: The life duration of cluster, the cluster will be
        auto-deleted at the end of this duration.
        A duration in seconds. (If auto_delete_time is set this parameter will be ignored)
    :type auto_delete_ttl: int
    """

    template_fields = ['cluster_name', 'project_id', 'zone', 'region']

    @apply_defaults
    def __init__(self,
                 cluster_name,
                 project_id,
                 num_workers,
                 zone,
                 network_uri=None,
                 subnetwork_uri=None,
                 internal_ip_only=None,
                 tags=None,
                 storage_bucket=None,
                 init_actions_uris=None,
                 init_action_timeout="10m",
                 metadata=None,
                 image_version=None,
                 properties=None,
                 master_machine_type='n1-standard-4',
                 master_disk_size=500,
                 worker_machine_type='n1-standard-4',
                 worker_disk_size=500,
                 num_preemptible_workers=0,
                 labels=None,
                 region='global',
                 gcp_conn_id='google_cloud_default',
                 delegate_to=None,
                 service_account=None,
                 service_account_scopes=None,
                 idle_delete_ttl=None,
                 auto_delete_time=None,
                 auto_delete_ttl=None,
                 *args,
                 **kwargs):

        super(DataprocClusterCreateOperatorModified, self).__init__(*args, **kwargs)
        self.gcp_conn_id = gcp_conn_id
        self.delegate_to = delegate_to
        self.cluster_name = cluster_name
        self.project_id = project_id
        self.num_workers = num_workers
        self.num_preemptible_workers = num_preemptible_workers
        self.storage_bucket = storage_bucket
        self.init_actions_uris = init_actions_uris
        self.init_action_timeout = init_action_timeout
        self.metadata = metadata
        self.image_version = image_version
        self.properties = properties
        self.master_machine_type = master_machine_type
        self.master_disk_size = master_disk_size
        self.worker_machine_type = worker_machine_type
        self.worker_disk_size = worker_disk_size
        self.labels = labels
        self.zone = zone
        self.network_uri = network_uri
        self.subnetwork_uri = subnetwork_uri
        self.internal_ip_only = internal_ip_only
        self.tags = tags
        self.region = region
        self.service_account = service_account
        self.service_account_scopes = service_account_scopes
        self.idle_delete_ttl = idle_delete_ttl
        self.auto_delete_time = auto_delete_time
        self.auto_delete_ttl = auto_delete_ttl

    def _get_cluster_list_for_project(self, service):
        result = service.projects().regions().clusters().list(
            projectId=self.project_id,
            region=self.region
        ).execute()
        return result.get('clusters', [])

    def _get_cluster(self, service):
        cluster_list = self._get_cluster_list_for_project(service)
        cluster = [c for c in cluster_list if c['clusterName'] == self.cluster_name]
        if cluster:
            return cluster[0]
        return None

    def _get_cluster_state(self, service):
        cluster = self._get_cluster(service)
        if 'status' in cluster:
            return cluster['status']['state']
        else:
            return None

    def _cluster_ready(self, state, service):
        if state == 'RUNNING':
            return True
        if state == 'ERROR':
            cluster = self._get_cluster(service)
            try:
                error_details = cluster['status']['details']
            except KeyError:
                error_details = 'Unknown error in cluster creation, ' \
                                'check Google Cloud console for details.'
            raise Exception(error_details)
        return False

    def _wait_for_done(self, service):
        while True:
            state = self._get_cluster_state(service)
            if state is None:
                self.log.info("No state for cluster '%s'", self.cluster_name)
                time.sleep(15)
            else:
                self.log.info("State for cluster '%s' is %s", self.cluster_name, state)
                if self._cluster_ready(state, service):
                    self.log.info(
                        "Cluster '%s' successfully created", self.cluster_name
                    )
                    return
                time.sleep(15)

    def _get_init_action_timeout(self):
        match = re.match(r"^(\d+)(s|m)$", self.init_action_timeout)
        if match:
            if match.group(2) == "s":
                return self.init_action_timeout
            elif match.group(2) == "m":
                val = float(match.group(1))
                return "{}s".format(timedelta(minutes=val).seconds)

        raise AirflowException(
            "DataprocClusterCreateOperatorModified init_action_timeout"
            " should be expressed in minutes or seconds. i.e. 10m, 30s")

    def _build_cluster_data(self):
        zone_uri = \
            'https://www.googleapis.com/compute/v1/projects/{}/zones/{}'.format(
                self.project_id, self.zone
            )
        master_type_uri = \
            "https://www.googleapis.com/compute/v1/projects/{}/zones/{}/machineTypes/{}"\
            .format(self.project_id, self.zone, self.master_machine_type)
        worker_type_uri = \
            "https://www.googleapis.com/compute/v1/projects/{}/zones/{}/machineTypes/{}"\
            .format(self.project_id, self.zone, self.worker_machine_type)

        cluster_data = {
            'projectId': self.project_id,
            'clusterName': self.cluster_name,
            'config': {
                'gceClusterConfig': {
                    'zoneUri': zone_uri
                },
                'masterConfig': {
                    'numInstances': 1,
                    'machineTypeUri': master_type_uri,
                    'diskConfig': {
                        'bootDiskSizeGb': self.master_disk_size
                    }
                },
                'workerConfig': {
                    'numInstances': self.num_workers,
                    'machineTypeUri': worker_type_uri,
                    'diskConfig': {
                        'bootDiskSizeGb': self.worker_disk_size
                    }
                },
                'secondaryWorkerConfig': {},
                'softwareConfig': {},
                #'lifecycleConfig': {}
            }
        }
        if self.num_preemptible_workers > 0:
            cluster_data['config']['secondaryWorkerConfig'] = {
                'numInstances': self.num_preemptible_workers,
                'machineTypeUri': worker_type_uri,
                'diskConfig': {
                    'bootDiskSizeGb': self.worker_disk_size
                },
                'isPreemptible': True
            }

        cluster_data['labels'] = self.labels if self.labels else {}
        # Dataproc labels must conform to the following regex:
        # [a-z]([-a-z0-9]*[a-z0-9])? (current airflow version string follows
        # semantic versioning spec: x.y.z).
        cluster_data['labels'].update({'airflow-version':
                                       'v' + version.replace('.', '-').replace('+', '-')})
        if self.storage_bucket:
            cluster_data['config']['configBucket'] = self.storage_bucket
        if self.metadata:
            cluster_data['config']['gceClusterConfig']['metadata'] = self.metadata
        if self.network_uri:
            cluster_data['config']['gceClusterConfig']['networkUri'] = self.network_uri
        if self.subnetwork_uri:
            cluster_data['config']['gceClusterConfig']['subnetworkUri'] = \
                self.subnetwork_uri
        if self.internal_ip_only:
            if not self.subnetwork_uri:
                raise AirflowException("Set internal_ip_only to true only when"
                                       " you pass a subnetwork_uri.")
            cluster_data['config']['gceClusterConfig']['internalIpOnly'] = True
        if self.tags:
            cluster_data['config']['gceClusterConfig']['tags'] = self.tags
        if self.image_version:
            cluster_data['config']['softwareConfig']['imageVersion'] = self.image_version
        if self.properties:
            cluster_data['config']['softwareConfig']['properties'] = self.properties
        #if self.idle_delete_ttl:
        #    cluster_data['config']['lifecycleConfig']['idleDeleteTtl'] = \
        #        "{}s".format(self.idle_delete_ttl)
        #if self.auto_delete_time:
        #    utc_auto_delete_time = timezone.convert_to_utc(self.auto_delete_time)
        #    cluster_data['config']['lifecycleConfig']['autoDeleteTime'] = \
        #        utc_auto_delete_time.format('%Y-%m-%dT%H:%M:%S.%fZ', formatter='classic')
        elif self.auto_delete_ttl:
            cluster_data['config']['lifecycleConfig']['autoDeleteTtl'] = \
                "{}s".format(self.auto_delete_ttl)
        if self.init_actions_uris:
            init_actions_dict = [
                {
                    'executableFile': uri,
                    'executionTimeout': self._get_init_action_timeout()
                } for uri in self.init_actions_uris
            ]
            cluster_data['config']['initializationActions'] = init_actions_dict
        if self.service_account:
            cluster_data['config']['gceClusterConfig']['serviceAccount'] =\
                self.service_account
        if self.service_account_scopes:
            cluster_data['config']['gceClusterConfig']['serviceAccountScopes'] =\
                self.service_account_scopes
        return cluster_data

    def execute(self, context):
        self.log.info('Creating cluster: %s', self.cluster_name)
        hook = DataProcHook(
            gcp_conn_id=self.gcp_conn_id,
            delegate_to=self.delegate_to
        )
        service = hook.get_conn()

        if self._get_cluster(service):
            self.log.info(
                'Cluster %s already exists... Checking status...',
                self.cluster_name
            )
            self._wait_for_done(service)
            return True

        cluster_data = self._build_cluster_data()
        try:
            service.projects().regions().clusters().create(
                projectId=self.project_id,
                region=self.region,
                body=cluster_data
            ).execute()
        except HttpError as e:
            # probably two cluster start commands at the same time
            time.sleep(10)
            if self._get_cluster(service):
                self.log.info(
                    'Cluster {} already exists... Checking status...',
                    self.cluster_name
                )
                self._wait_for_done(service)
                return True
            else:
                raise e

        self._wait_for_done(service)



yesterday = datetime.datetime.combine(
    datetime.datetime.today() - datetime.timedelta(1),
    datetime.datetime.min.time())

default_dag_args = {
    # Setting start date as yesterday starts the DAG immediately when it is
    # detected in the Cloud Storage bucket.
    'start_date': yesterday,
    # To email on failure or retry set 'email' arg to your email and enable
    # emailing here.
    'email_on_failure': False,
    'email_on_retry': False,
    # If a task fails, retry it once after waiting at least 5 minutes
    'retries': 0,
    'project_id': models.Variable.get('gcp-project')
}

# [START composer_quickstart_schedule]
with models.DAG(
  '${programConfiguration.name}',
  #Continue to run DAG once per day
  schedule_interval=datetime.timedelta(days=1),
  default_args=default_dag_args) as dag:
